/*
 * The MIT License
 *
 * Copyright 2019 lucamazza.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package snowpackage;

import java.awt.Color;
import java.io.File;
import javax.swing.JColorChooser;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 * Frame that contains both the Snowflake panel and the Triangle panel.
 * Here you can find all controls.
 * 
 * @author Luca Mazza
 * @since 1.0
 */
public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainFrame.
     * 
     * @param loader flag that decides when an existing snowflake gets loaded.
     * @param handle file to load.
     */
    public MainFrame(boolean loader, String handle) {
        initComponents();
        this.setTitle("SnowFlake");
        snowFlakePanel.repaint();
        trianglePanel.repaint();
        if(loader){
            File handleFile = new File(handle);
            trianglePanel.deSerialize(handleFile);
        }
        snowFlakePanel.tf = trianglePanel;
        fillPreviewPanel.setBackground(new Color(22, 152, 175));
        strokePreviewPanel.setBackground(new Color(0, 0, 0));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        snowFlakePanel = new snowpackage.SnowFlakePanel();
        controlPanel = new javax.swing.JPanel();
        fillSelector = new javax.swing.JCheckBox();
        fillPreviewPanel = new javax.swing.JPanel();
        strokeSelector = new javax.swing.JCheckBox();
        strokePreviewPanel = new javax.swing.JPanel();
        resetCuts = new javax.swing.JButton();
        savePoly = new javax.swing.JButton();
        exportAsSVG = new javax.swing.JButton();
        exportAsPNG = new javax.swing.JButton();
        NewFlake = new javax.swing.JButton();
        pointSize = new javax.swing.JSlider();
        triangleContainer = new javax.swing.JPanel();
        trianglePanel = new snowpackage.TrianglePanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        setMinimumSize(new java.awt.Dimension(1024, 768));
        setPreferredSize(new java.awt.Dimension(1024, 768));
        setSize(new java.awt.Dimension(1024, 768));

        snowFlakePanel.setToolTipText("");

        javax.swing.GroupLayout snowFlakePanelLayout = new javax.swing.GroupLayout(snowFlakePanel);
        snowFlakePanel.setLayout(snowFlakePanelLayout);
        snowFlakePanelLayout.setHorizontalGroup(
            snowFlakePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        snowFlakePanelLayout.setVerticalGroup(
            snowFlakePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 728, Short.MAX_VALUE)
        );

        getContentPane().add(snowFlakePanel, java.awt.BorderLayout.CENTER);

        controlPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        controlPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 0));

        fillSelector.setSelected(true);
        fillSelector.setToolTipText("");
        fillSelector.setFocusable(false);
        fillSelector.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        fillSelector.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        fillSelector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fillSelectorActionPerformed(evt);
            }
        });
        controlPanel.add(fillSelector);

        fillPreviewPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        fillPreviewPanel.setToolTipText("Fill");
        fillPreviewPanel.setMaximumSize(new java.awt.Dimension(10, 10));
        fillPreviewPanel.setMinimumSize(new java.awt.Dimension(10, 10));
        fillPreviewPanel.setPreferredSize(new java.awt.Dimension(10, 10));
        fillPreviewPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fillPreviewPanelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout fillPreviewPanelLayout = new javax.swing.GroupLayout(fillPreviewPanel);
        fillPreviewPanel.setLayout(fillPreviewPanelLayout);
        fillPreviewPanelLayout.setHorizontalGroup(
            fillPreviewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 8, Short.MAX_VALUE)
        );
        fillPreviewPanelLayout.setVerticalGroup(
            fillPreviewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 8, Short.MAX_VALUE)
        );

        controlPanel.add(fillPreviewPanel);

        strokeSelector.setFocusable(false);
        strokeSelector.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        strokeSelector.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        strokeSelector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                strokeSelectorActionPerformed(evt);
            }
        });
        controlPanel.add(strokeSelector);

        strokePreviewPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        strokePreviewPanel.setToolTipText("Stroke");
        strokePreviewPanel.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        strokePreviewPanel.setMaximumSize(new java.awt.Dimension(10, 10));
        strokePreviewPanel.setMinimumSize(new java.awt.Dimension(10, 10));
        strokePreviewPanel.setPreferredSize(new java.awt.Dimension(10, 10));
        strokePreviewPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                strokePreviewPanelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout strokePreviewPanelLayout = new javax.swing.GroupLayout(strokePreviewPanel);
        strokePreviewPanel.setLayout(strokePreviewPanelLayout);
        strokePreviewPanelLayout.setHorizontalGroup(
            strokePreviewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 8, Short.MAX_VALUE)
        );
        strokePreviewPanelLayout.setVerticalGroup(
            strokePreviewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 8, Short.MAX_VALUE)
        );

        controlPanel.add(strokePreviewPanel);

        resetCuts.setText("Reset");
        resetCuts.setToolTipText("Reset");
        resetCuts.setFocusable(false);
        resetCuts.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        resetCuts.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        resetCuts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetCutsActionPerformed(evt);
            }
        });
        controlPanel.add(resetCuts);

        savePoly.setText("Snapshot");
        savePoly.setToolTipText("Snapshot");
        savePoly.setFocusable(false);
        savePoly.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        savePoly.setMaximumSize(new java.awt.Dimension(70, 70));
        savePoly.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        savePoly.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                savePolyActionPerformed(evt);
            }
        });
        controlPanel.add(savePoly);

        exportAsSVG.setText("Export as SVG");
        exportAsSVG.setToolTipText("Export as SVG");
        exportAsSVG.setFocusable(false);
        exportAsSVG.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        exportAsSVG.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        exportAsSVG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportAsSVGActionPerformed(evt);
            }
        });
        controlPanel.add(exportAsSVG);

        exportAsPNG.setText("Export as PNG");
        exportAsPNG.setToolTipText("Export as PNG");
        exportAsPNG.setFocusable(false);
        exportAsPNG.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        exportAsPNG.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        exportAsPNG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportAsPNGActionPerformed(evt);
            }
        });
        controlPanel.add(exportAsPNG);

        NewFlake.setText("New");
        NewFlake.setToolTipText("New snowflake");
        NewFlake.setFocusable(false);
        NewFlake.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        NewFlake.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        NewFlake.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NewFlakeActionPerformed(evt);
            }
        });
        controlPanel.add(NewFlake);

        pointSize.setMaximum(20);
        pointSize.setMinimum(5);
        pointSize.setToolTipText("Polygon's handles size");
        pointSize.setValue(5);
        pointSize.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                pointSizeStateChanged(evt);
            }
        });
        controlPanel.add(pointSize);

        getContentPane().add(controlPanel, java.awt.BorderLayout.PAGE_START);

        triangleContainer.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        trianglePanel.setBackground(new java.awt.Color(255, 255, 255));
        trianglePanel.setMaximumSize(new java.awt.Dimension(300, 500));
        trianglePanel.setMinimumSize(new java.awt.Dimension(300, 500));
        trianglePanel.setOpaque(false);
        trianglePanel.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                trianglePanelPropertyChange(evt);
            }
        });

        javax.swing.GroupLayout trianglePanelLayout = new javax.swing.GroupLayout(trianglePanel);
        trianglePanel.setLayout(trianglePanelLayout);
        trianglePanelLayout.setHorizontalGroup(
            trianglePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
        trianglePanelLayout.setVerticalGroup(
            trianglePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 500, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout triangleContainerLayout = new javax.swing.GroupLayout(triangleContainer);
        triangleContainer.setLayout(triangleContainerLayout);
        triangleContainerLayout.setHorizontalGroup(
            triangleContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
            .addGroup(triangleContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(triangleContainerLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(trianglePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        triangleContainerLayout.setVerticalGroup(
            triangleContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
            .addGroup(triangleContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(triangleContainerLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(trianglePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        trianglePanel.getAccessibleContext().setAccessibleParent(snowFlakePanel);

        getContentPane().add(triangleContainer, java.awt.BorderLayout.EAST);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Increases/decreases the dimension of the handle points.
     * 
     * @param evt <code>JSlider</code> event that register the whole list
     * of mouse events.
     */
    private void pointSizeStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_pointSizeStateChanged
        trianglePanel.RAD = pointSize.getValue();
        trianglePanel.repaint();
    }//GEN-LAST:event_pointSizeStateChanged

    /**
     * Resets all points in the TrianglePanel.
     * 
     * @param evt <code>JButton</code> event that register the whole list
     * of mouse events.
     */
    private void resetCutsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetCutsActionPerformed
        Object[] options = { "Ok", "Cancel" };
        int response = JOptionPane.showOptionDialog(null,
             "Are you sure you want to discard all changes", "Warning",
             JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE,
             null, options, options[0]);
        if(JOptionPane.YES_OPTION == response){
            trianglePanel.poly.reset();
            trianglePanel.points.clear();
            trianglePanel.fillColor = new Color(22, 152, 175);
            trianglePanel.strokeColor = Color.BLACK;
            snowFlakePanel.fillColor = new Color(22, 152, 175);
            snowFlakePanel.strokeColor = Color.BLACK;
            snowFlakePanel.tf = trianglePanel;
            trianglePanel.repaint();
        }
        trianglePanel.updateGraphics();
        snowFlakePanel.repaint();
    }//GEN-LAST:event_resetCutsActionPerformed

    /**
     * Saves the cut polygon, serializing it.
     * 
     * @param evt <code>JButton</code> event that register the whole list
     * of mouse events.
     */
    private void savePolyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_savePolyActionPerformed
        JFileChooser jfc = new JFileChooser();
        FileNameExtensionFilter fnf = new FileNameExtensionFilter("Snowflake file (*.snowflake)", "snowflake");
        jfc.setFileFilter(fnf);
        jfc.showDialog(this, "Save");
        try{
            String handle = new String(jfc.getSelectedFile().toPath().toString());
            File handleFile = new File(handle);
            trianglePanel.serialize(handleFile);
        }catch(NullPointerException npe){
            System.out.println("Closed");
        }

    }//GEN-LAST:event_savePolyActionPerformed

    /**
     * Opens a new snowflake instance.
     * 
     * @param evt <code>JButton</code> event that register the whole list
     * of mouse events.
     */
    private void NewFlakeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NewFlakeActionPerformed
        if(!trianglePanel.points.isEmpty()){
            Object[] options = { "Ok", "Cancel" };
            int response = JOptionPane.showOptionDialog(null,
                 "Are you sure you want to exit without saving?", "Warning",
                 JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE,
                 null, options, options[0]);
            if(JOptionPane.YES_OPTION == response){
                SnowFlake on = new SnowFlake(null, false);
                this.dispose();
                on.setVisible(true);
            }
        }else{
            SnowFlake on = new SnowFlake(null, false);
            this.dispose();
            on.setVisible(true);
        }
        
    }//GEN-LAST:event_NewFlakeActionPerformed

    /**
     * Exports as an SVG image the generated snowflake.
     * 
     * @param evt <code>JButton</code> event that register the whole list
     * of mouse events.
     */
    private void exportAsSVGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportAsSVGActionPerformed
        JFileChooser jfc = new JFileChooser();
        FileNameExtensionFilter fnf = new FileNameExtensionFilter("SVG File (*.svg)", "SVG");
        jfc.setFileFilter(fnf);
        jfc.showDialog(this, "Save");
        try{
            String handle = new String(jfc.getSelectedFile().toPath().toString());
            snowFlakePanel.generateSVG(handle);
        }catch(NullPointerException npe){
        }
    }//GEN-LAST:event_exportAsSVGActionPerformed

    /**
     * Exports as an SVG image the generated snowflake.
     * 
     * @param evt <code>JButton</code> event that register the whole list
     * of mouse events
     */
    private void exportAsPNGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportAsPNGActionPerformed
        JFileChooser jfc = new JFileChooser();
        FileNameExtensionFilter fnf = new FileNameExtensionFilter("PNG File (*.png)", "PNG");
        jfc.setFileFilter(fnf);
        jfc.showDialog(this, "Save");
        try{
            String handle = new String(jfc.getSelectedFile().toPath().toString());
            snowFlakePanel.generatePNG(handle, 600);
        }catch(NullPointerException npe){
        }
    }//GEN-LAST:event_exportAsPNGActionPerformed
    
    /**
     * Changes the fill color of the triangle and the snowflake based on the 
     * <code>JColorPicker</code> instance opened.
     * 
     * @param evt <code>JPanel</code> event that register the whole list
     * of mouse events
     */
    private void fillPreviewPanelMouseClicked(java.awt.event.MouseEvent evt) {                                              
        JColorChooser jcc = new JColorChooser();
        Color c = jcc.showDialog(null, "Select a color", Color.BLACK);
        snowFlakePanel.fillColor = c;
        snowFlakePanel.repaint();
        trianglePanel.fillColor = c;
        trianglePanel.repaint();
        fillPreviewPanel.setBackground(c);
        fillPreviewPanel.repaint();
    }                                             
   
    /**
     * Changes the border color of the triangle and the snowflake based on the 
     * <code>JColorPicker</code> instance opened.
     * 
     * @param evt <code>JPanel</code> event that register the whole list
     * of mouse events
     */
    private void strokePreviewPanelMouseClicked(java.awt.event.MouseEvent evt) {                                                
        JColorChooser jcc = new JColorChooser();
        Color c = jcc.showDialog(null, "Sele ct a color", Color.BLACK);
        snowFlakePanel.strokeColor = c;
        snowFlakePanel.repaint();
        trianglePanel.strokeColor = c;
        trianglePanel.repaint();
        strokePreviewPanel.setBackground(c);
        strokePreviewPanel.repaint();
    }                                               
   
    /**
     * Makes visible/invisible the fill of the snowflake.
     * 
     * @param evt <code>JCheckbox</code> event that register the whole list
     * of mouse events
     */
    private void fillSelectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fillSelectorActionPerformed
        snowFlakePanel.fill = !snowFlakePanel.fill;
        trianglePanel.fill = !trianglePanel.fill;
        snowFlakePanel.repaint();
        trianglePanel.repaint();
    }//GEN-LAST:event_fillSelectorActionPerformed
    
    /**
     * Makes visible/invisible the border of the snowflake.
     * 
     * @param evt <code>JCheckbox</code> event that register the whole list
     * of mouse events
     */
    private void strokeSelectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_strokeSelectorActionPerformed
        snowFlakePanel.stroke = !snowFlakePanel.stroke;
        trianglePanel.stroke = !trianglePanel.stroke;
        snowFlakePanel.repaint();
        trianglePanel.repaint();
    }//GEN-LAST:event_strokeSelectorActionPerformed

//GEN-FIRST:event_strokePreviewPanelMouseClicked
 
//GEN-LAST:event_strokePreviewPanelMouseClicked

//GEN-FIRST:event_fillPreviewPanelMouseClicked
 
//GEN-LAST:event_fillPreviewPanelMouseClicked
    /**
     * Catches all the <code>PropertyChanged</code> events thrown.
     * 
     * @param evt <code>PropertyChanged</code> event that register the whole list
     * of mouse events
     */
    private void trianglePanelPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_trianglePanelPropertyChange
        snowFlakePanel.repaint();
    }//GEN-LAST:event_trianglePanelPropertyChange

    /**
     * Main method.
     * 
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame(false, "").setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton NewFlake;
    private javax.swing.JPanel controlPanel;
    private javax.swing.JButton exportAsPNG;
    private javax.swing.JButton exportAsSVG;
    private javax.swing.JPanel fillPreviewPanel;
    private javax.swing.JCheckBox fillSelector;
    private javax.swing.JSlider pointSize;
    private javax.swing.JButton resetCuts;
    private javax.swing.JButton savePoly;
    private snowpackage.SnowFlakePanel snowFlakePanel;
    private javax.swing.JPanel strokePreviewPanel;
    private javax.swing.JCheckBox strokeSelector;
    private javax.swing.JPanel triangleContainer;
    private snowpackage.TrianglePanel trianglePanel;
    // End of variables declaration//GEN-END:variables
}
